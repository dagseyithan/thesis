from keras.layers import Dense, Input
import time


from keras.models import Model
from keras.optimizers import Adam
from keras.callbacks import TensorBoard, LambdaCallback, ReduceLROnPlateau, EarlyStopping
from keras.layers.advanced_activations import ReLU
from data_utilities.generator import Native_DataGenerator_for_StructuralSimilarityModel_Autoencoder
import numpy as np
DIM = 9

relu = ReLU()
relu.__name__ = 'relu'

encoder_input = Input(shape=(DIM,))
x = Dense(90)(encoder_input)
x = ReLU(max_value=1.0)(x)
x = Dense(30)(x)
x = ReLU(max_value=1.0)(x)
x = Dense(4)(x)
encoder_output = ReLU(max_value=1.0)(x)

encoder = Model(encoder_input, encoder_output, name='encoder')
encoder.summary()

decoder_input = Input(shape=(4,))
x = Dense(30)(decoder_input)
x = ReLU(max_value=1.0)(x)
x = Dense(90)(x)
x = ReLU(max_value=1.0)(x)
x = Dense(DIM)(x)
decoder_output = ReLU(max_value=1.0)(x)


decoder = Model(decoder_input, decoder_output, name='decoder')
decoder.summary()

autoencoder_input = Input(shape=(DIM,))
encoded = encoder(autoencoder_input)
decoded = decoder(encoded)
autoencoder = Model(autoencoder_input, decoded, name='autoencoder')
autoencoder.summary()
autoencoder.compile(optimizer=Adam(lr=0.001, clipvalue=1.0), loss='mean_squared_error')


model_name = 'model_structuralsimilarity_autoencoder3x3_4dim_embeddings'
tensorboard = TensorBoard(log_dir='./logs/model_structuralsimilarity/' + model_name+time.strftime("%Y%m%d%H%M%S"), histogram_freq=0, batch_size=300,
                          write_graph=True, write_grads=False, write_images=False, embeddings_freq=0,
                          embeddings_layer_names=None, embeddings_metadata=None, embeddings_data=None,
                          update_freq='epoch')

def epoch_test(epoch, logs):
    st = np.random.randint(2, size=(1, DIM)).astype(np.float)
    print(st)
    print(autoencoder.predict(st))

    st = np.random.randint(2, size=(1, DIM)).astype(np.float)
    print(st)
    print(autoencoder.predict(st))

print(time.strftime("%Y%m%d%H%M%S"))

epoch_end_callback = LambdaCallback(on_epoch_end=epoch_test)
reduce_lr_callback = ReduceLROnPlateau(monitor='loss', patience=10, factor=0.1, verbose=1, min_lr=0.0001)
early_stopping_callback = EarlyStopping(monitor='loss', min_delta=0.0, patience=100)

data_generator = Native_DataGenerator_for_StructuralSimilarityModel_Autoencoder(batch_size=20)
autoencoder.fit_generator(generator=data_generator, shuffle=True, epochs=1000, workers=4,
                          use_multiprocessing=False,
                          callbacks=[tensorboard, epoch_end_callback, early_stopping_callback, reduce_lr_callback])
autoencoder.save(filepath='trained_models/'+model_name+'.h5')
encoder.save(filepath='trained_models/'+model_name+ '_encoder'+'.h5')
decoder.save(filepath='trained_models/'+model_name+'_decoder'+'.h5')